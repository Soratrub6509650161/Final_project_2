import sys
import os
import time
import threading
import numpy as np
import pytesseract
import mss
import cv2
from PyQt5.QtWidgets import (
    QApplication, QWidget, QPushButton, QLabel, QTextEdit, QVBoxLayout, QHBoxLayout,
    QFileDialog, QDoubleSpinBox, QGroupBox, QGridLayout, QMessageBox, QFrame, QComboBox, QDialog, QListWidget, QLineEdit, QSystemTrayIcon, QStyle, QCheckBox
)
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QFont, QPalette, QColor, QIcon
import winsound
import tkinter as tk
import csv
from datetime import datetime
from datetime import timedelta
import re
import pandas as pd
# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° import ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡πÑ‡∏ó‡∏¢
try:
    from pythainlp.tokenize import word_tokenize
except ImportError:
    word_tokenize = None

class AreaSelector:
    def __init__(self, delay=5):
        self.region = None
        self.delay = delay

    def select_area(self):
        print(f"\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö (‡πÄ‡∏ä‡πà‡∏ô Twitch chat)")
        for i in range(self.delay, 0, -1):
            print(f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å {i} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
            time.sleep(1)
        print("\n‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≤‡∏Å‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠")
        root = tk.Tk()
        root.attributes('-fullscreen', True)
        root.attributes('-alpha', 0.3)
        root.title('‡∏•‡∏≤‡∏Å‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö')
        start_x = start_y = end_x = end_y = 0
        rect = None
        def on_mouse_down(event):
            nonlocal start_x, start_y
            start_x, start_y = event.x, event.y
        def on_mouse_drag(event):
            nonlocal rect
            if rect:
                canvas.delete(rect)
            rect = canvas.create_rectangle(start_x, start_y, event.x, event.y, outline='red', width=2)
        def on_mouse_up(event):
            nonlocal end_x, end_y
            end_x, end_y = event.x, event.y
            root.quit()
        canvas = tk.Canvas(root, cursor="cross")
        canvas.pack(fill=tk.BOTH, expand=True)
        canvas.bind("<ButtonPress-1>", on_mouse_down)
        canvas.bind("<B1-Motion>", on_mouse_drag)
        canvas.bind("<ButtonRelease-1>", on_mouse_up)
        root.mainloop()
        root.destroy()
        x1, y1 = min(start_x, end_x), min(start_y, end_y)
        x2, y2 = max(start_x, end_x), max(start_y, end_y)
        self.region = {"left": x1, "top": y1, "width": x2 - x1, "height": y2 - y1}
        return self.region

class BadWordManagerDialog(QDialog):
    def __init__(self, badwords_file, parent=None):
        super().__init__(parent)
        self.setWindowTitle('‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö')
        self.badwords_file = badwords_file
        self.setMinimumWidth(400)
        self.list_widget = QListWidget()
        self.input_line = QLineEdit()
        self.input_line.setPlaceholderText('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÉ‡∏´‡∏°‡πà...')
        add_btn = QPushButton('‡πÄ‡∏û‡∏¥‡πà‡∏°')
        del_btn = QPushButton('‡∏•‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å')
        save_btn = QPushButton('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å')
        close_btn = QPushButton('‡∏õ‡∏¥‡∏î')
        add_btn.clicked.connect(self.add_word)
        del_btn.clicked.connect(self.delete_selected)
        save_btn.clicked.connect(self.save_words)
        close_btn.clicked.connect(self.close)
        btn_layout = QHBoxLayout()
        btn_layout.addWidget(add_btn)
        btn_layout.addWidget(del_btn)
        btn_layout.addWidget(save_btn)
        btn_layout.addWidget(close_btn)
        layout = QVBoxLayout()
        layout.addWidget(QLabel('‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:'))
        layout.addWidget(self.list_widget)
        layout.addWidget(self.input_line)
        layout.addLayout(btn_layout)
        self.setLayout(layout)
        self.load_words()
    def load_words(self):
        self.list_widget.clear()
        try:
            with open(self.badwords_file, 'r', encoding='utf-8') as f:
                for line in f:
                    word = line.strip()
                    if word:
                        self.list_widget.addItem(word)
        except FileNotFoundError:
            pass
    def add_word(self):
        word = self.input_line.text().strip()
        if word and not self.list_widget.findItems(word, Qt.MatchExactly):
            self.list_widget.addItem(word)
            self.input_line.clear()
    def delete_selected(self):
        for item in self.list_widget.selectedItems():
            self.list_widget.takeItem(self.list_widget.row(item))
    def save_words(self):
        words = [self.list_widget.item(i).text().strip() for i in range(self.list_widget.count()) if self.list_widget.item(i).text().strip()]
        try:
            with open(self.badwords_file, 'w', encoding='utf-8') as f:
                for w in words:
                    f.write(w + '\n')
            QMessageBox.information(self, '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
        except Exception as e:
            QMessageBox.warning(self, '‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', f'‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ: {e}')

class DashboardWindow(QWidget):
    def __init__(self, parent=None):
        super().__init__()
        self.parent = parent
        self.setWindowTitle('Dashboard ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ - Bad Word Detector')
        self.setGeometry(300, 300, 600, 400)
        self.setFont(QFont('Tahoma', 10))
        self.init_ui()
        
        # Timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self.update_stats)
        self.update_timer.start(1000)  # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    def init_ui(self):
        layout = QVBoxLayout()
        layout.setSpacing(20)
        layout.setContentsMargins(30, 30, 30, 30)

        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        title_label = QLabel('üìä Dashboard ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö')
        title_label.setStyleSheet('font-size: 20px; font-weight: bold; color: #2196F3; text-align: center;')
        layout.addWidget(title_label)

        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        stats_group = QGroupBox('üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô')
        stats_layout = QGridLayout()
        
        # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        detection_count_label = QLabel('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ:')
        detection_count_label.setStyleSheet('font-weight: bold; color: #d32f2f; font-size: 14px;')
        self.detection_count_label = QLabel('0')
        self.detection_count_label.setStyleSheet('font-size: 24px; font-weight: bold; color: #d32f2f;')
        stats_layout.addWidget(detection_count_label, 0, 0)
        stats_layout.addWidget(self.detection_count_label, 0, 1)
        
        # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Screenshot
        screenshot_count_label = QLabel('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Screenshot:')
        screenshot_count_label.setStyleSheet('font-weight: bold; color: #2196F3; font-size: 14px;')
        self.screenshot_count_label = QLabel('0')
        self.screenshot_count_label.setStyleSheet('font-size: 24px; font-weight: bold; color: #2196F3;')
        stats_layout.addWidget(screenshot_count_label, 1, 0)
        stats_layout.addWidget(self.screenshot_count_label, 1, 1)
        
        # ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        working_time_label = QLabel('‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:')
        working_time_label.setStyleSheet('font-weight: bold; color: #4CAF50; font-size: 14px;')
        self.working_time_label = QLabel('00:00:00')
        self.working_time_label.setStyleSheet('font-size: 24px; font-weight: bold; color: #4CAF50;')
        stats_layout.addWidget(working_time_label, 2, 0)
        stats_layout.addWidget(self.working_time_label, 2, 1)
        
        # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        detection_freq_label = QLabel('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö:')
        detection_freq_label.setStyleSheet('font-weight: bold; color: #FF9800; font-size: 14px;')
        self.detection_freq_label = QLabel('0 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ')
        self.detection_freq_label.setStyleSheet('font-size: 24px; font-weight: bold; color: #FF9800;')
        stats_layout.addWidget(detection_freq_label, 3, 0)
        stats_layout.addWidget(self.detection_freq_label, 3, 1)
        
        stats_group.setLayout(stats_layout)
        layout.addWidget(stats_group)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î
        close_btn = QPushButton('‡∏õ‡∏¥‡∏î Dashboard')
        close_btn.clicked.connect(self.close)
        close_btn.setStyleSheet('background-color: #FF5722; font-size: 14px; padding: 10px;')
        layout.addWidget(close_btn)

        self.setLayout(layout)

    def update_stats(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å"""
        if self.parent:
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
            self.detection_count_label.setText(str(self.parent.detection_count))
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Screenshot
            self.screenshot_count_label.setText(str(self.parent.screenshot_count))
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            if self.parent.start_time:
                elapsed = datetime.now() - self.parent.start_time
                hours = elapsed.seconds // 3600
                minutes = (elapsed.seconds % 3600) // 60
                seconds = elapsed.seconds % 60
                self.working_time_label.setText(f'{hours:02d}:{minutes:02d}:{seconds:02d}')
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
            now = datetime.now()
            recent_detections = [t for t in self.parent.detection_times if (now - t).seconds <= 60]
            freq = len(recent_detections)
            self.detection_freq_label.setText(f'{freq} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ')

class BadWordDetectorApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Bad Word Detector (PyQt5) - Enhanced Version')
        self.setGeometry(200, 200, 700, 600)
        self.setFont(QFont('Tahoma', 10))
        self.sct = mss.mss()
        self.region = None
        self.timer = QTimer()
        self.timer.timeout.connect(self.detect_badwords)
        self.detecting = False
        self.bad_words = self.load_all_bad_words()
        self.sound_file = None
        self.detect_interval = 1
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥
        self.last_detected_text = ''
        self.last_text_hash = None
        self.processed_count = 0
        self.skipped_count = 0
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dashboard
        self.detection_count = 0
        self.screenshot_count = 0
        self.start_time = None
        self.detection_times = []  # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î log_dir ‡∏Å‡πà‡∏≠‡∏ô
        self.log_dir = "logs"
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå screenshots
        if not os.path.exists(self.log_dir):
            os.makedirs(self.log_dir)
        
        self.tray_icon = QSystemTrayIcon(self)
        style = self.style()
        icon = style.standardIcon(QStyle.SP_MessageBoxWarning)
        self.tray_icon.setIcon(icon)
        self.tray_icon.setVisible(True)
        self.setStyleSheet("""
            QWidget {
                background-color: #f0f0f0;
            }
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:disabled {
                background-color: #cccccc;
            }
            QGroupBox {
                border: 2px solid #4CAF50;
                border-radius: 6px;
                margin-top: 12px;
                font-weight: bold;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px;
            }
            QTextEdit {
                border: 1px solid #cccccc;
                border-radius: 4px;
                padding: 5px;
                background-color: white;
            }
            QLabel {
                color: #333333;
            }
            QDoubleSpinBox {
                padding: 5px;
                border: 1px solid #cccccc;
                border-radius: 4px;
            }
            QCheckBox {
                color: #333333;
                font-weight: bold;
            }
        """)
        self.logs = []
        self.current_log = None  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö log ‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        self.last_detected_text = None  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        self.last_log_time = 0
        self.log_cooldown = 5.0  # default 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()
        layout.setSpacing(15)
        layout.setContentsMargins(20, 20, 20, 20)

        # Status
        status_frame = QFrame()
        status_frame.setFrameStyle(QFrame.StyledPanel)
        status_layout = QHBoxLayout()
        self.status_label = QLabel('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô')
        self.status_label.setStyleSheet('color: #4CAF50; font-weight: bold; font-size: 12px;')
        status_layout.addWidget(self.status_label)
        status_frame.setLayout(status_layout)
        layout.addWidget(status_frame)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏∏‡∏Å‡∏†‡∏≤‡∏©‡∏≤
        lang_info = QLabel('‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö: ‡πÑ‡∏ó‡∏¢ + ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©')
        lang_info.setStyleSheet('font-weight: bold; color: #2196F3;')
        layout.addWidget(lang_info)

        # Badword manager button
        badword_mgr_btn = QPushButton('‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö (‡πÑ‡∏ó‡∏¢)')
        badword_mgr_btn.clicked.connect(lambda: self.open_badword_manager('badwords.txt'))
        badword_mgr_en_btn = QPushButton('‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)')
        badword_mgr_en_btn.clicked.connect(lambda: self.open_badword_manager('badwords_en.txt'))
        btn_mgr_layout = QHBoxLayout()
        btn_mgr_layout.addWidget(badword_mgr_btn)
        btn_mgr_layout.addWidget(badword_mgr_en_btn)
        layout.addLayout(btn_mgr_layout)

        # Area selection
        area_group = QGroupBox('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö')
        area_layout = QVBoxLayout()
        self.select_area_btn = QPushButton('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö')
        self.select_area_btn.clicked.connect(self.select_area)
        area_layout.addWidget(self.select_area_btn)
        area_group.setLayout(area_layout)
        layout.addWidget(area_group)

        # Control buttons
        control_group = QGroupBox('‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö')
        control_layout = QHBoxLayout()
        self.start_btn = QPushButton('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö')
        self.stop_btn = QPushButton('‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö')
        self.start_btn.clicked.connect(self.start_detection)
        self.stop_btn.clicked.connect(self.stop_detection)
        self.stop_btn.setEnabled(False)
        control_layout.addWidget(self.start_btn)
        control_layout.addWidget(self.stop_btn)
        control_group.setLayout(control_layout)
        layout.addWidget(control_group)

        # Performance settings
        performance_group = QGroupBox('‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û')
        performance_layout = QGridLayout()
        
        # Checkbox ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥
        self.skip_duplicate_checkbox = QCheckBox('‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥ (‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î CPU)')
        self.skip_duplicate_checkbox.setChecked(True)
        self.skip_duplicate_checkbox.setToolTip('‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°')
        performance_layout.addWidget(self.skip_duplicate_checkbox, 0, 0, 1, 2)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        self.duplicate_status_label = QLabel('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥')
        self.duplicate_status_label.setStyleSheet('color: #4CAF50; font-size: 10px;')
        performance_layout.addWidget(self.duplicate_status_label, 1, 0, 1, 2)
        
        # ‡∏õ‡∏∏‡πà‡∏° reset
        reset_btn = QPushButton('‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö')
        reset_btn.clicked.connect(self.reset_duplicate_check)
        reset_btn.setStyleSheet('background-color: #FF9800;')
        performance_layout.addWidget(reset_btn, 2, 0, 1, 2)
        
        # Dashboard Button
        dashboard_btn = QPushButton('üìä ‡πÄ‡∏õ‡∏¥‡∏î Dashboard')
        dashboard_btn.clicked.connect(self.open_dashboard)
        dashboard_btn.setStyleSheet('background-color: #2196F3; font-size: 14px; padding: 10px;')
        performance_layout.addWidget(dashboard_btn, 3, 0, 1, 2)
        
        # Settings
        settings_group = QGroupBox('‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤')
        settings_layout = QGridLayout()
        settings_layout.setSpacing(15)
        
        interval_label = QLabel('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ):')
        interval_label.setStyleSheet('font-weight: bold;')
        settings_layout.addWidget(interval_label, 0, 0)
        
        self.interval_spin = QDoubleSpinBox()
        self.interval_spin.setMinimum(0.1)
        self.interval_spin.setMaximum(10)
        self.interval_spin.setSingleStep(0.1)
        self.interval_spin.setValue(1.0)
        self.interval_spin.valueChanged.connect(self.update_interval)
        settings_layout.addWidget(self.interval_spin, 0, 1)
        
        sound_label = QLabel('‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:')
        sound_label.setStyleSheet('font-weight: bold;')
        settings_layout.addWidget(sound_label, 1, 0)
        
        self.sound_btn = QPushButton('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á (.wav)')
        self.sound_btn.clicked.connect(self.select_sound)
        settings_layout.addWidget(self.sound_btn, 1, 1)
        
        # --- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÅ‡∏Ñ‡∏õ log ---
        logcap_label = QLabel('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÅ‡∏Ñ‡∏õ‡∏†‡∏≤‡∏û/‡πÄ‡∏Å‡πá‡∏ö log (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ):')
        logcap_label.setStyleSheet('font-weight: bold;')
        settings_layout.addWidget(logcap_label, 2, 0)
        self.logcap_spin = QDoubleSpinBox()
        self.logcap_spin.setMinimum(1)
        self.logcap_spin.setMaximum(60)
        self.logcap_spin.setSingleStep(1)
        self.logcap_spin.setValue(self.log_cooldown)
        self.logcap_spin.valueChanged.connect(self.update_logcap_interval)
        settings_layout.addWidget(self.logcap_spin, 2, 1)
        
        # --- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ---
        preset_label = QLabel('‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥:')
        preset_label.setStyleSheet('font-weight: bold;')
        settings_layout.addWidget(preset_label, 3, 0)
        
        preset_layout = QHBoxLayout()
        slow_chat_btn = QPushButton('‡πÅ‡∏ä‡∏ó‡πÑ‡∏´‡∏•‡∏ä‡πâ‡∏≤ (30s)')
        medium_chat_btn = QPushButton('‡πÅ‡∏ä‡∏ó‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (10s)')
        fast_chat_btn = QPushButton('‡πÅ‡∏ä‡∏ó‡πÑ‡∏´‡∏•‡πÄ‡∏£‡πá‡∏ß (5s)')
        very_fast_chat_btn = QPushButton('‡πÅ‡∏ä‡∏ó‡πÑ‡∏´‡∏•‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å (2s)')
        
        slow_chat_btn.clicked.connect(lambda: self.logcap_spin.setValue(30))
        medium_chat_btn.clicked.connect(lambda: self.logcap_spin.setValue(10))
        fast_chat_btn.clicked.connect(lambda: self.logcap_spin.setValue(5))
        very_fast_chat_btn.clicked.connect(lambda: self.logcap_spin.setValue(2))
        
        preset_layout.addWidget(slow_chat_btn)
        preset_layout.addWidget(medium_chat_btn)
        preset_layout.addWidget(fast_chat_btn)
        preset_layout.addWidget(very_fast_chat_btn)
        settings_layout.addLayout(preset_layout, 3, 1)
        
        # --- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå ---
        file_mgmt_label = QLabel('‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå:')
        file_mgmt_label.setStyleSheet('font-weight: bold;')
        settings_layout.addWidget(file_mgmt_label, 4, 0)
        
        file_mgmt_layout = QHBoxLayout()
        self.select_folder_btn = QPushButton('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å')
        self.select_folder_btn.clicked.connect(self.select_save_folder)
        self.folder_label = QLabel(f'‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {self.log_dir}')
        self.folder_label.setStyleSheet('font-size: 10px; color: #666;')
        
        file_mgmt_layout.addWidget(self.select_folder_btn)
        file_mgmt_layout.addWidget(self.folder_label)
        settings_layout.addLayout(file_mgmt_layout, 4, 1)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå
        file_actions_layout = QHBoxLayout()
        self.open_folder_btn = QPushButton('‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå')
        self.open_folder_btn.clicked.connect(self.open_save_folder)
        self.cleanup_btn = QPushButton('‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤ (7 ‡∏ß‡∏±‡∏ô)')
        self.cleanup_btn.clicked.connect(self.cleanup_old_files)
        
        file_actions_layout.addWidget(self.open_folder_btn)
        file_actions_layout.addWidget(self.cleanup_btn)
        settings_layout.addLayout(file_actions_layout, 5, 0, 1, 2)
        # --- ‡∏à‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° ---

        settings_group.setLayout(settings_layout)
        layout.addWidget(settings_group)

        # Results - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏ö
        results_group = QGroupBox('‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö')
        results_layout = QVBoxLayout()
        
        badword_label = QLabel('‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏ö:')
        badword_label.setStyleSheet('font-weight: bold; color: #d32f2f;')
        results_layout.addWidget(badword_label)
        
        self.badword_text = QTextEdit()
        self.badword_text.setMaximumHeight(60)
        self.badword_text.setPlaceholderText('‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà...')
        results_layout.addWidget(self.badword_text)
        
        results_group.setLayout(results_layout)
        layout.addWidget(results_group)

        export_btn = QPushButton('Export Log (CSV)')
        export_btn.clicked.connect(self.export_log)
        layout.addWidget(export_btn)

        # --- ‡πÄ‡∏û‡∏¥‡πà‡∏° UI/UX ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á ---
        # Dark Mode Toggle
        dark_mode_layout = QHBoxLayout()
        self.dark_mode_checkbox = QCheckBox('Dark Mode')
        self.dark_mode_checkbox.clicked.connect(self.toggle_dark_mode)
        dark_mode_layout.addWidget(self.dark_mode_checkbox)
        
        # Keyboard Shortcuts Info
        shortcuts_info = QLabel('Keyboard Shortcuts:\nCtrl+S: ‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö | Ctrl+A: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà | Ctrl+D: Dark Mode')
        shortcuts_info.setStyleSheet('font-size: 10px; color: #666; background-color: #f9f9f9; padding: 5px; border-radius: 3px;')
        dark_mode_layout.addWidget(shortcuts_info)
        
        layout.addLayout(dark_mode_layout)
        # --- ‡∏à‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° ---

        self.setLayout(layout)

    def reset_duplicate_check(self):
        """Reset ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥"""
        self.last_detected_text = ''
        self.last_text_hash = None
        self.processed_count = 0
        self.skipped_count = 0
        self.duplicate_status_label.setText('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö')
        self.duplicate_status_label.setStyleSheet('color: #2196F3; font-size: 10px;')

    def select_area(self):
        self.status_label.setText('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà...')
        self.status_label.setStyleSheet('color: #FFA500; font-weight: bold; font-size: 12px;')
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á QTimer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
        countdown_timer = QTimer()
        countdown = 5
        
        def update_countdown():
            nonlocal countdown
            if countdown > 0:
                self.status_label.setText(f'‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å {countdown} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...')
                countdown -= 1
            else:
                countdown_timer.stop()
                selector = AreaSelector(delay=0)  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ delay ‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
                region = selector.select_area()
                if region['width'] > 0 and region['height'] > 0:
                    self.region = region
                    self.status_label.setText('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß')
                    self.status_label.setStyleSheet('color: #4CAF50; font-weight: bold; font-size: 12px;')
                else:
                    self.status_label.setText('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
                    self.status_label.setStyleSheet('color: #FF0000; font-weight: bold; font-size: 12px;')
        
        countdown_timer.timeout.connect(update_countdown)
        countdown_timer.start(1000)  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    def start_detection(self):
        if not self.region:
            QMessageBox.warning(self, '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö')
            return
        self.detecting = True
        self.timer.start(int(self.detect_interval * 1000))
        self.status_label.setText('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö...')
        self.status_label.setStyleSheet('color: #2196F3; font-weight: bold; font-size: 12px;')
        self.start_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° Dashboard
        self.start_time = datetime.now()
        self.detection_count = 0
        self.screenshot_count = 0
        self.detection_times = []
        
        # Timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        self.working_timer = QTimer()
        self.working_timer.timeout.connect(self.update_working_time)
        self.working_timer.start(1000)  # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        
        # --- ‡πÄ‡∏£‡∏¥‡πà‡∏° log ‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà ---
        self.current_log = {
            'datetime_start': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'badwords': set(),
            'screenshots': []
        }
        # Reset ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
        self.reset_duplicate_check()

    def stop_detection(self):
        self.detecting = False
        self.timer.stop()
        if hasattr(self, 'working_timer'):
            self.working_timer.stop()
        self.status_label.setText('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö')
        self.status_label.setStyleSheet('color: #FFA500; font-weight: bold; font-size: 12px;')
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        # --- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ ---
        if self.current_log and self.current_log['badwords']:
            self.logs.append({
                'datetime_start': self.current_log['datetime_start'],
                'datetime_end': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'badwords': ', '.join(sorted(self.current_log['badwords'])),
                'screenshots': ', '.join(self.current_log['screenshots'])
            })
        self.current_log = None

    def update_interval(self):
        self.detect_interval = self.interval_spin.value()
        if self.detecting:
            self.timer.stop()
            self.timer.start(int(self.detect_interval * 1000))

    def select_sound(self):
        file, _ = QFileDialog.getOpenFileName(self, '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á', '', 'WAV Files (*.wav)')
        if file:
            self.sound_file = file
            self.sound_btn.setText(os.path.basename(file))
        else:
            self.sound_file = None
            self.sound_btn.setText('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á (.wav)')

    def load_all_bad_words(self):
        badwords = []
        for filename in ['badwords.txt', 'badwords_en.txt']:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    badwords += [line.strip() for line in f if line.strip()]
            except FileNotFoundError:
                continue
        return badwords

    def update_logcap_interval(self):
        self.log_cooldown = self.logcap_spin.value()

    def update_dashboard(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Dashboard ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"""
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        self.detection_count_label.setText(str(self.detection_count))
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Screenshot
        self.screenshot_count_label.setText(str(self.screenshot_count))
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        if self.start_time:
            elapsed = datetime.now() - self.start_time
            hours = elapsed.seconds // 3600
            minutes = (elapsed.seconds % 3600) // 60
            seconds = elapsed.seconds % 60
            self.working_time_label.setText(f'{hours:02d}:{minutes:02d}:{seconds:02d}')
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
        now = datetime.now()
        recent_detections = [t for t in self.detection_times if (now - t).seconds <= 60]
        freq = len(recent_detections)
        self.detection_freq_label.setText(f'{freq} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ')

    def update_working_time(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"""
        self.update_dashboard()

    def detect_badwords(self):
        if not self.region:
            return
        
        try:
            # 1. ‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û
            screenshot = self.sct.grab(self.region)
            img = np.array(screenshot)
            img = cv2.cvtColor(img, cv2.COLOR_BGRA2RGB)
            gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
            _, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
            
            # 2. OCR
            text = pytesseract.image_to_string(thresh, lang='tha+eng')
            text_now = text.strip()
            
            # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥
            if self.skip_duplicate_checkbox.isChecked():
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á hash ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
                text_hash = hash(text_now)
                
                if text_hash == self.last_text_hash:
                    # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
                    self.skipped_count += 1
                    self.duplicate_status_label.setText('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥')
                    self.duplicate_status_label.setStyleSheet('color: #FFA500; font-size: 10px;')
                    return
                
                # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó hash
                self.last_text_hash = text_hash
                self.processed_count += 1
                self.duplicate_status_label.setText('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà')
                self.duplicate_status_label.setStyleSheet('color: #4CAF50; font-size: 10px;')
            
            # 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö
            badwords_th = []
            badwords_en = []
            for w in self.bad_words:
                if re.search(r'[‡∏Å-‡πô]', w):
                    badwords_th.append(w)
                else:
                    badwords_en.append(w)
            
            found_words = set()
            text_no_space = text.replace(' ', '')
            text_lower = text.lower()
            text_no_space_lower = text_no_space.lower()
            
            for w in badwords_th + badwords_en:
                w_lower = w.lower()
                safe_chars = [re.escape(c) for c in w_lower]
                pattern = r'[\s\.\-\_]*'.join(safe_chars)
                try:
                    if re.search(pattern, text_lower):
                        found_words.add(w)
                except re.error as e:
                    print(f'Regex error for word {w}: {e}')
                if w_lower in text_no_space_lower:
                    found_words.add(w)
            
            if word_tokenize is not None:
                try:
                    words_th = word_tokenize(text, engine='newmm')
                    found_words.update([w for w in badwords_th if w in words_th])
                except Exception as e:
                    print(f"Pythainlp Error: {e}")
            
            final_found_words = sorted(list(found_words))
            
            # 6. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            if final_found_words:
                self.badword_text.setPlainText(', '.join(final_found_words))
                self.play_alert()
                self.show_popup_alert(final_found_words)
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Dashboard
                self.detection_count += 1
                self.detection_times.append(datetime.now())
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log
                now = time.time()
                if now - self.last_log_time > self.log_cooldown:
                    self.last_log_time = now
                    screenshot_filename = os.path.join(
                        self.log_dir, 
                        f'screenshot_{datetime.now().strftime("%Y%m%d_%H%M%S")}.png'
                    )
                    cv2.imwrite(screenshot_filename, cv2.cvtColor(img, cv2.COLOR_RGB2BGR))
                    
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Dashboard Screenshot
                    self.screenshot_count += 1
                    
                    if self.current_log is not None:
                        self.current_log['badwords'].update(final_found_words)
                        self.current_log['screenshots'].append(screenshot_filename)
            else:
                self.badword_text.setPlainText('')
            
            # 7. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            self.last_detected_text = text_now
            
        except Exception as e:
            self.status_label.setText(f'‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}')
            self.status_label.setStyleSheet('color: red')

    def play_alert(self):
        if self.sound_file:
            try:
                winsound.PlaySound(self.sound_file, winsound.SND_FILENAME | winsound.SND_ASYNC)
            except Exception as e:
                print(f'‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {e}')
        else:
            winsound.Beep(1000, 500)

    def open_badword_manager(self, filename):
        dlg = BadWordManagerDialog(filename, self)
        if dlg.exec_():
            # reload badwords after editing
            self.bad_words = self.load_all_bad_words()

    def show_popup_alert(self, found_words):
        # ‡πÅ‡∏™‡∏î‡∏á notification ‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏•‡πà‡∏≤‡∏á ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏î OK
        self.tray_icon.showMessage(
            '‡∏û‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö',
            f'‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö: {', '.join(found_words)}',
            QSystemTrayIcon.Warning,
            4000  # 4 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        )

    def export_log(self):
        if not self.logs:
            QMessageBox.information(self, 'Export Log', '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö')
            return
        file, _ = QFileDialog.getSaveFileName(self, '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV', '', 'CSV Files (*.csv)')
        if file:
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÉ‡∏ô CSV
            export_data = []
            for log in self.logs:
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
                start_time = datetime.strptime(log['datetime_start'], '%Y-%m-%d %H:%M:%S')
                end_time = datetime.strptime(log['datetime_end'], '%Y-%m-%d %H:%M:%S')
                duration = (end_time - start_time).total_seconds()
                
                # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏ö
                badword_count = len(log['badwords'].split(', ')) if log['badwords'] else 0
                
                # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô screenshot
                screenshot_count = len(log['screenshots'].split(', ')) if log['screenshots'] else 0
                
                export_data.append({
                    '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°': log['datetime_start'],
                    '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î': log['datetime_end'],
                    '‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)': round(duration, 1),
                    '‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏ö': log['badwords'],
                    '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö': badword_count,
                    '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Screenshot': screenshot_count,
                    '‡πÑ‡∏ü‡∏•‡πå Screenshot': log['screenshots']
                })
            
            df = pd.DataFrame(export_data)
            df.to_csv(file, index=False, encoding='utf-8-sig')
            QMessageBox.information(self, 'Export Log', f'‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß\n‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(export_data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£')

    def select_save_folder(self):
        folder = QFileDialog.getExistingDirectory(self, '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å')
        if folder:
            self.log_dir = folder
            self.folder_label.setText(f'‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {self.log_dir}')

    def open_save_folder(self):
        os.startfile(self.log_dir)

    def cleanup_old_files(self):
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        for filename in os.listdir(self.log_dir):
            if filename.startswith('screenshot_') and filename.endswith('.png'):
                file_path = os.path.join(self.log_dir, filename)
                file_time = datetime.fromtimestamp(os.path.getctime(file_path))
                if datetime.now() - file_time > timedelta(days=7):
                    os.remove(file_path)
        QMessageBox.information(self, '‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', '‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')

    def toggle_dark_mode(self):
        """‡∏™‡∏•‡∏±‡∏ö Dark Mode"""
        if self.dark_mode_checkbox.isChecked():
            self.setStyleSheet("""
                QWidget {
                    background-color: #2d2d2d;
                    color: #ffffff;
                }
                QPushButton {
                    background-color: #4CAF50;
                    color: white;
                    border: none;
                    padding: 8px 16px;
                    border-radius: 4px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #45a049;
                }
                QGroupBox {
                    border: 2px solid #4CAF50;
                    border-radius: 6px;
                    margin-top: 12px;
                    font-weight: bold;
                    padding-top: 10px;
                    background-color: #3d3d3d;
                }
                QTextEdit {
                    border: 1px solid #cccccc;
                    border-radius: 4px;
                    padding: 5px;
                    background-color: #3d3d3d;
                    color: #ffffff;
                }
                QLabel {
                    color: #ffffff;
                }
                QDoubleSpinBox {
                    padding: 5px;
                    border: 1px solid #cccccc;
                    border-radius: 4px;
                    background-color: #3d3d3d;
                    color: #ffffff;
                }
                QCheckBox {
                    color: #ffffff;
                    font-weight: bold;
                }
            """)
        else:
            self.setStyleSheet("""
                QWidget {
                    background-color: #f0f0f0;
                }
                QPushButton {
                    background-color: #4CAF50;
                    color: white;
                    border: none;
                    padding: 8px 16px;
                    border-radius: 4px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #45a049;
                }
                QGroupBox {
                    border: 2px solid #4CAF50;
                    border-radius: 6px;
                    margin-top: 12px;
                    font-weight: bold;
                    padding-top: 10px;
                }
                QTextEdit {
                    border: 1px solid #cccccc;
                    border-radius: 4px;
                    padding: 5px;
                    background-color: white;
                }
                QLabel {
                    color: #333333;
                }
                QDoubleSpinBox {
                    padding: 5px;
                    border: 1px solid #cccccc;
                    border-radius: 4px;
                }
                QCheckBox {
                    color: #333333;
                    font-weight: bold;
                }
            """)

    def keyPressEvent(self, event):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Keyboard Shortcuts"""
        if event.key() == Qt.Key_S and event.modifiers() == Qt.ControlModifier:
            # Ctrl+S: ‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
            if self.detecting:
                self.stop_detection()
            else:
                self.start_detection()
        elif event.key() == Qt.Key_A and event.modifiers() == Qt.ControlModifier:
            # Ctrl+A: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
            self.select_area()
        elif event.key() == Qt.Key_D and event.modifiers() == Qt.ControlModifier:
            # Ctrl+D: Dark Mode
            self.dark_mode_checkbox.setChecked(not self.dark_mode_checkbox.isChecked())
            self.toggle_dark_mode()
        else:
            super().keyPressEvent(event)

    def open_dashboard(self):
        """‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ Dashboard"""
        self.dashboard_window = DashboardWindow(self)
        self.dashboard_window.show()

if __name__ == '__main__':
    pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
    app = QApplication(sys.argv)
    window = BadWordDetectorApp()
    window.show()
    sys.exit(app.exec_()) 