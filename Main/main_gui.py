import sys
import os
import time
import threading
import socket
import logging
from collections import deque
from PyQt5.QtWidgets import (
    QApplication, QWidget, QPushButton, QLabel, QTextEdit, QVBoxLayout, QHBoxLayout,
    QFileDialog, QGroupBox, QGridLayout, QMessageBox, QFrame, QDialog, QListWidget, QLineEdit, QSystemTrayIcon, QStyle, QCheckBox, QTabWidget
)
from PyQt5.QtCore import Qt, QTimer, pyqtSignal, QThread, QObject, QMutex
from PyQt5.QtGui import QFont, QIcon
import winsound
import csv
from datetime import datetime
from datetime import timedelta
import re
import pandas as pd
import difflib

# ‡πÄ‡∏û‡∏¥‡πà‡∏° import ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö profanity_check
try:
    from profanity_check import predict, predict_prob  # type: ignore
    PROFANITY_CHECK_AVAILABLE = True
    print("profanity_check imported successfully")
except ImportError:
    PROFANITY_CHECK_AVAILABLE = False
    print("profanity_check not available, falling back to basic detection")
    
    
try:
    from wordsegment import load, segment # type: ignore
    WORDSEGMENT_AVAILABLE = True
    print("wordsegment imported successfully")
except ImportError:
    WORDSEGMENT_AVAILABLE = False
    print("wordsegment not available, falling back to basic detection")    


# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° import ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡πÑ‡∏ó‡∏¢
try:
      from pythainlp.tokenize import word_tokenize  # type: ignore
except ImportError:
    word_tokenize = None

class TwitchChatWorker(QObject):
    """Worker class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Twitch chat connection"""
    message_received = pyqtSignal(str, str)  # username, message
    bad_word_detected = pyqtSignal(str, str, list)  # username, message, bad_words
    connection_status = pyqtSignal(bool, str)  # connected, status_message
    chat_stats = pyqtSignal(int, int)  # total_messages, bad_word_count
    error_occurred = pyqtSignal(str)  # error message
    
    def __init__(self, channel_name, oauth_token=None):
        super().__init__()
        self.channel_name = channel_name.lower()
        self.oauth_token = oauth_token
        self.running = False
        self.socket = None
        self.bad_words = self.load_bad_words()
        self.total_messages = 0
        self.bad_word_count = 0
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Memory - ‡πÉ‡∏ä‡πâ Circular Buffer
        self.max_messages_in_memory = 1000
        self.chat_messages = deque(maxlen=self.max_messages_in_memory)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° Thread Safety
        self.chat_mutex = QMutex()
        
        self.reconnect_attempts = 0
        self.max_reconnect_attempts = 5
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° Logging (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Å‡πà‡∏≠‡∏ô initialize_detection_system)
        self.setup_logging()
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û - ‡∏™‡∏£‡πâ‡∏≤‡∏á Trie ‡πÅ‡∏•‡∏∞ Pre-compile patterns
        self.badwords_th = set()
        self.badwords_en = set()
        
        # ‡πÇ‡∏´‡∏•‡∏î wordsegment dictionary
        if WORDSEGMENT_AVAILABLE:
            try:
                load()  # ‡πÇ‡∏´‡∏•‡∏î dictionary ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
                print("wordsegment dictionary loaded successfully")
            except Exception as e:
                print(f"Error loading wordsegment dictionary: {e}")
        
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÑ‡∏ó‡∏¢/‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏ö‡∏ö‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        try:
            self.initialize_detection_system()
        except Exception:
            # ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏° ‡πÅ‡∏°‡πâ init ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏à‡∏∞ fallback ‡πÉ‡∏ä‡πâ self.bad_words ‡πÑ‡∏î‡πâ
            pass
        
    def setup_logging(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error handling ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('twitch_detector.log', encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        
    def initialize_detection_system(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        try:
            # ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
            for word in self.bad_words:
                if re.search(r'[‡∏Å-‡πô]', word):
                    self.badwords_th.add(word.lower())
                else:
                    self.badwords_en.add(word.lower())
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ profanity_check ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if PROFANITY_CHECK_AVAILABLE:
                self.logger.info("Using profanity_check for English profanity detection")
            else:
                self.logger.warning("profanity_check not available, using basic detection")
            
            self.logger.info(f"Initialized detection system with {len(self.bad_words)} words")
            self.logger.info(f"Thai words: {len(self.badwords_th)}, English words: {len(self.badwords_en)}")
            
        except Exception as e:
            self.logger.error(f"Error initializing detection system: {e}")
            self.error_occurred.emit(f"Detection system error: {e}")
    
      
    def load_bad_words(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
        badwords = []
        try:
            with open('badwords.txt', 'r', encoding='utf-8') as f:
                badwords += [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            self.logger.warning("badwords.txt not found")
        except Exception as e:
            self.logger.error(f"Error loading badwords.txt: {e}")
            
        try:
            with open('badwords_en.txt', 'r', encoding='utf-8') as f:
                badwords += [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            self.logger.warning("badwords_en.txt not found")
        except Exception as e:
            self.logger.error(f"Error loading badwords_en.txt: {e}")
            
        return badwords
    
    def detect_english_profanity(self, message):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏î‡πâ‡∏ß‡∏¢ wordsegment + badwords_en - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        try:
            print(f"üîç Debug: detect_english_profanity called with: '{message}'")
            
            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: Clean message
            cleaned_message = re.sub(r'[^a-zA-Z\s]', '', message.lower())
            print(f"üßπ Cleaned message: '{cleaned_message}'")
            
            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏´‡∏°‡πà - ‡πÉ‡∏ä‡πâ wordsegment ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏•‡∏¢
            if WORDSEGMENT_AVAILABLE:
                try:
                    # ‡∏•‡∏ö space ‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß segment ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    message_no_space = cleaned_message.replace(' ', '')
                    segmented_words = segment(message_no_space)
                    print(f"‚úÇÔ∏è Segmented entire message: '{message_no_space}' -> {segmented_words}")
                    
                    # ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢ space ‡∏î‡πâ‡∏ß‡∏¢ (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏õ‡∏Å‡∏ï‡∏¥)
                    normal_words = cleaned_message.split()
                    words_to_check = list(set(segmented_words + normal_words))  # ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ã‡πâ‡∏≥
                    print(f"üéØ Final words to check: {words_to_check}")
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è wordsegment error: {e}")
                    words_to_check = cleaned_message.split()
            else:
                print("‚ùå wordsegment not available")
                words_to_check = cleaned_message.split()
            
            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≥
            found_words = []
            for word in words_to_check:
                if len(word) >= 3:  # ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏û‡∏≠
                    if word in self.badwords_en:
                        found_words.append(word)
                        print(f"üö® Found profanity: '{word}'")
            
            print(f"‚úÖ Final result: {found_words}")
            return found_words
            
        except Exception as e:
            print(f"‚ùå Error in detect_english_profanity: {e}")
            return []
                  
    def detect_thai_profanity(self, message):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"""
        try:
            found_words = set()
            message_lower = message.lower()
            message_clean = re.sub(r'[^a-zA-Z‡∏Å-‡πô\s]', '', message_lower)
            message_clean_no_space = message_clean.replace(' ', '')
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÑ‡∏ó‡∏¢‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏•‡∏ö‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÅ‡∏•‡∏∞ space ‡πÅ‡∏•‡πâ‡∏ß
            for badword in self.badwords_th:
                if badword in message_clean_no_space:
                    found_words.add(badword)
            
            return list(found_words)
            
        except Exception as e:
            self.logger.error(f"Error in Thai profanity detection: {e}")
            return []
        
        
    def optimized_detect_bad_words(self, message):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û - ‡πÉ‡∏ä‡πâ profanity_check ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©"""
        try:
            all_found_words = []
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÑ‡∏ó‡∏¢
            thai_words = self.detect_thai_profanity(message)
            all_found_words.extend(thai_words)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
            english_words = self.detect_english_profanity(message)
            all_found_words.extend(english_words)
            
            # ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ã‡πâ‡∏≥
            return list(set(all_found_words))
            
        except Exception as e:
            self.logger.error(f"Error in optimized bad word detection: {e}")
            self.error_occurred.emit(f"Detection error: {e}")
            return []
           
    
    def connect_to_twitch(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Twitch IRC"""
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.settimeout(10)  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ timeout
            self.socket.connect(('irc.chat.twitch.tv', 6667))
            
            # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• authentication
            if self.oauth_token:
                self.socket.send(f'PASS {self.oauth_token}\n'.encode('utf-8'))
            self.socket.send(f'NICK justinfan{int(time.time())}\n'.encode('utf-8'))
            self.socket.send(f'JOIN #{self.channel_name}\n'.encode('utf-8'))
            
            # ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
            time.sleep(1)
            
            self.connection_status.emit(True, f"‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö {self.channel_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            self.reconnect_attempts = 0
            self.logger.info(f"Successfully connected to {self.channel_name}")
            return True
            
        except socket.timeout:
            error_msg = "Connection timeout"
            self.logger.error(error_msg)
            self.connection_status.emit(False, error_msg)
            self.error_occurred.emit(error_msg)
            return False
        except socket.gaierror:
            error_msg = "DNS resolution failed"
            self.logger.error(error_msg)
            self.connection_status.emit(False, error_msg)
            self.error_occurred.emit(error_msg)
            return False
        except ConnectionRefusedError:
            error_msg = "Connection refused by server"
            self.logger.error(error_msg)
            self.connection_status.emit(False, error_msg)
            self.error_occurred.emit(error_msg)
            return False
        except Exception as e:
            error_msg = f"Connection error: {e}"
            self.logger.error(error_msg)
            self.connection_status.emit(False, error_msg)
            self.error_occurred.emit(error_msg)
            return False
        except Exception as e:
            error_msg = f"Connection error: {e}"
            self.logger.error(error_msg)
            self.connection_status.emit(False, error_msg)
            self.error_occurred.emit(error_msg)
            # Cleanup ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î error
            if self.socket:
                try:
                    self.socket.close()
                    self.socket = None
                except:
                    pass
            return False
    
    def listen_to_chat(self):
        """‡∏ü‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å chat"""
        while self.running:
            try:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ socket ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if not self.socket:
                    self.logger.error("Socket is None, cannot receive data")
                    break
                
                data = self.socket.recv(1024).decode('utf-8')
                if not data:
                    continue
                
                # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ PING/PONG
                if data.startswith('PING'):
                    if self.socket:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
                        self.socket.send('PONG :tmi.twitch.tv\r\n'.encode('utf-8'))
                    continue
                
                # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° chat
                if 'PRIVMSG' in data:
                    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: :username!username@username.tmi.twitch.tv PRIVMSG #channel :message
                    parts = data.split('PRIVMSG')
                    if len(parts) >= 2:
                        user_part = parts[0].split('!')[0][1:]  # ‡πÄ‡∏≠‡∏≤ username
                        message_part = parts[1].split(':', 1)[1].strip()  # ‡πÄ‡∏≠‡∏≤ message
                        
                        self.total_messages += 1
                        
                        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
                        self.message_received.emit(user_part, message_part)
                        
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö
                        found_words = self.optimized_detect_bad_words(message_part)
                        
                        if found_words:
                            self.bad_word_count += 1
                            
                            chat_info = {
                                'timestamp': datetime.now(),
                                'username': user_part,
                                'message': message_part,
                                'bad_words': found_words,
                                'channel': self.channel_name
                            }
                            
                            # ‡πÉ‡∏ä‡πâ mutex ‡πÄ‡∏û‡∏∑‡πà‡∏≠ thread safety
                            self.chat_mutex.lock()
                            try:
                                self.chat_messages.append(chat_info)
                            finally:
                                self.chat_mutex.unlock()
                            
                            # ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏û‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö
                            self.bad_word_detected.emit(user_part, message_part, found_words)
                            
                            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
                            self.chat_stats.emit(self.total_messages, self.bad_word_count)
                
            except socket.timeout:
                continue
            except UnicodeDecodeError as e:
                self.logger.warning(f"Unicode decode error: {e}")
                continue
            except Exception as e:
                if self.running:
                    error_msg = f"Chat listening error: {e}"
                    self.logger.error(error_msg)
                    self.error_occurred.emit(error_msg)
                    self.connection_status.emit(False, f"‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≤‡∏î: {e}")
                    
                    # ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
                    if self.reconnect_attempts < self.max_reconnect_attempts:
                        self.reconnect_attempts += 1
                        retry_msg = f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà... ({self.reconnect_attempts}/{self.max_reconnect_attempts})"
                        self.logger.info(retry_msg)
                        self.connection_status.emit(False, retry_msg)
                        time.sleep(5)  # ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                        if self.connect_to_twitch():
                            continue
                    else:
                        self.logger.error("Max reconnection attempts reached")
                    break
    
    def start_listening(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ü‡∏±‡∏á chat"""
        if self.connect_to_twitch():
            self.running = True
            self.listen_to_chat()
    
    def stop_listening(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏±‡∏á chat"""
        self.running = False
        if self.socket:
            try:
                self.socket.close()
                self.socket = None  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô None ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏¥‡∏î
                self.logger.info("Socket closed successfully")
            except Exception as e:
                self.logger.error(f"Error closing socket: {e}")
                self.socket = None  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô None ‡πÅ‡∏°‡πâ‡∏à‡∏∞ error
    
    def get_chat_messages(self):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏ó‡πÅ‡∏ö‡∏ö thread-safe"""
        self.chat_mutex.lock()
        try:
            return list(self.chat_messages)
        finally:
            self.chat_mutex.unlock()
    
    def clear_chat_messages(self):
        """‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏ó‡πÅ‡∏ö‡∏ö thread-safe"""
        self.chat_mutex.lock()
        try:
            self.chat_messages.clear()
            self.logger.info("Chat messages cleared")
        finally:
            self.chat_mutex.unlock()

class TwitchChatThread(QThread):
    """Thread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Twitch chat"""
    
    def __init__(self, channel_name, oauth_token=None):
        super().__init__()
        self.worker = TwitchChatWorker(channel_name, oauth_token)
        self.worker.moveToThread(self)
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ thread signals
        self.started.connect(self.worker.start_listening)
        self.finished.connect(self.worker.stop_listening)
    
    def run(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á thread"""
        pass  # Worker ‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ thread ‡πÄ‡∏£‡∏¥‡πà‡∏°

class BadWordManagerDialog(QDialog):
    def __init__(self, badwords_file, parent=None):
        super().__init__(parent)
        self.setWindowTitle('‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö')
        self.badwords_file = badwords_file
        self.setMinimumWidth(400)
        self.list_widget = QListWidget()
        self.input_line = QLineEdit()
        self.input_line.setPlaceholderText('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÉ‡∏´‡∏°‡πà...')
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        self.search_line = QLineEdit()
        self.search_line.setPlaceholderText('‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö...')
        self.search_line.textChanged.connect(self.filter_words)
        
        add_btn = QPushButton('‡πÄ‡∏û‡∏¥‡πà‡∏°')
        del_btn = QPushButton('‡∏•‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å')
        save_btn = QPushButton('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å')
        close_btn = QPushButton('‡∏õ‡∏¥‡∏î')
        add_btn.clicked.connect(self.add_word)
        del_btn.clicked.connect(self.delete_selected)
        save_btn.clicked.connect(self.save_words)
        close_btn.clicked.connect(self.close)
        btn_layout = QHBoxLayout()
        btn_layout.addWidget(add_btn)
        btn_layout.addWidget(del_btn)
        btn_layout.addWidget(save_btn)
        btn_layout.addWidget(close_btn)
        layout = QVBoxLayout()
        layout.addWidget(QLabel('‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:'))
        layout.addWidget(self.search_line)
        layout.addWidget(self.list_widget)
        layout.addWidget(self.input_line)
        layout.addLayout(btn_layout)
        self.setLayout(layout)
        self.all_words = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö filter
        self.load_words()

    def load_words(self):
        self.list_widget.clear()
        self.all_words = []
        try:
            with open(self.badwords_file, 'r', encoding='utf-8') as f:
                for line in f:
                    word = line.strip()
                    if word:
                        self.all_words.append(word)
                        self.list_widget.addItem(word)
        except FileNotFoundError:
            pass

    def filter_words(self):
        search = self.search_line.text().strip().lower()
        self.list_widget.clear()
        for word in self.all_words:
            if search in word.lower():
                self.list_widget.addItem(word)

    def add_word(self):
        word = self.input_line.text().strip()
        if word and not self.list_widget.findItems(word, Qt.MatchExactly):
            self.all_words.append(word)
            self.filter_words()
            self.input_line.clear()

    def delete_selected(self):
        for item in self.list_widget.selectedItems():
            word = item.text()
            self.all_words = [w for w in self.all_words if w != word]
            self.list_widget.takeItem(self.list_widget.row(item))
        self.filter_words()

    def save_words(self):
        try:
            with open(self.badwords_file, 'w', encoding='utf-8') as f:
                for word in self.all_words:
                    f.write(word + '\n')
            QMessageBox.information(self, '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
        except Exception as e:
            QMessageBox.warning(self, '‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', f'‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ: {e}')

class DashboardWindow(QWidget):
    def __init__(self, parent=None):
        super().__init__()
        self.parent = parent
        self.setWindowTitle('Dashboard ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ - Bad Word Detector')
        self.setGeometry(300, 300, 700, 500)
        self.setFont(QFont('Tahoma', 10))
        self.init_ui()
        
        # Timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self.update_stats)
        self.update_timer.start(1000)  # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    def init_ui(self):
        layout = QVBoxLayout()
        layout.setSpacing(20)
        layout.setContentsMargins(30, 30, 30, 30)

        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        title_label = QLabel('üìä Dashboard ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö')
        title_label.setStyleSheet('font-size: 20px; font-weight: bold; color: #2196F3; text-align: center;')
        layout.addWidget(title_label)

        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        stats_group = QGroupBox('üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô')
        stats_layout = QGridLayout()
        
        # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        detection_count_label = QLabel('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ:')
        detection_count_label.setStyleSheet('font-weight: bold; color: #d32f2f; font-size: 14px;')
        self.detection_count_label = QLabel('0')
        self.detection_count_label.setStyleSheet('font-size: 24px; font-weight: bold; color: #d32f2f;')
        stats_layout.addWidget(detection_count_label, 0, 0)
        stats_layout.addWidget(self.detection_count_label, 0, 1)
        
        # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        total_messages_label = QLabel('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:')
        total_messages_label.setStyleSheet('font-weight: bold; color: #2196F3; font-size: 14px;')
        self.total_messages_label = QLabel('0')
        self.total_messages_label.setStyleSheet('font-size: 24px; font-weight: bold; color: #2196F3;')
        stats_layout.addWidget(total_messages_label, 1, 0)
        stats_layout.addWidget(self.total_messages_label, 1, 1)
        
        # ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        working_time_label = QLabel('‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:')
        working_time_label.setStyleSheet('font-weight: bold; color: #4CAF50; font-size: 14px;')
        self.working_time_label = QLabel('00:00:00')
        self.working_time_label.setStyleSheet('font-size: 24px; font-weight: bold; color: #4CAF50;')
        stats_layout.addWidget(working_time_label, 2, 0)
        stats_layout.addWidget(self.working_time_label, 2, 1)
        
        # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        detection_freq_label = QLabel('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö:')
        detection_freq_label.setStyleSheet('font-weight: bold; color: #FF9800; font-size: 14px;')
        self.detection_freq_label = QLabel('0 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ')
        self.detection_freq_label.setStyleSheet('font-size: 24px; font-weight: bold; color: #FF9800;')
        stats_layout.addWidget(detection_freq_label, 3, 0)
        stats_layout.addWidget(self.detection_freq_label, 3, 1)
        
        # ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö
        ratio_label = QLabel('‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö:')
        ratio_label.setStyleSheet('font-weight: bold; color: #9C27B0; font-size: 14px;')
        self.ratio_label = QLabel('0%')
        self.ratio_label.setStyleSheet('font-size: 24px; font-weight: bold; color: #9C27B0;')
        stats_layout.addWidget(ratio_label, 4, 0)
        stats_layout.addWidget(self.ratio_label, 4, 1)
        
        stats_group.setLayout(stats_layout)
        layout.addWidget(stats_group)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° Performance Statistics
        perf_group = QGroupBox('‚ö° ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û')
        perf_layout = QGridLayout()
        
        # ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        avg_detection_label = QLabel('‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢:')
        avg_detection_label.setStyleSheet('font-weight: bold; color: #607D8B; font-size: 14px;')
        self.avg_detection_label = QLabel('0.000 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ')
        self.avg_detection_label.setStyleSheet('font-size: 18px; font-weight: bold; color: #607D8B;')
        perf_layout.addWidget(avg_detection_label, 0, 0)
        perf_layout.addWidget(self.avg_detection_label, 0, 1)
        
        # ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Memory
        memory_usage_label = QLabel('‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Memory:')
        memory_usage_label.setStyleSheet('font-weight: bold; color: #795548; font-size: 14px;')
        self.memory_usage_label = QLabel('0 KB')
        self.memory_usage_label.setStyleSheet('font-size: 18px; font-weight: bold; color: #795548;')
        perf_layout.addWidget(memory_usage_label, 1, 0)
        perf_layout.addWidget(self.memory_usage_label, 1, 1)
        
        # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Error
        error_count_label = QLabel('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Error:')
        error_count_label.setStyleSheet('font-weight: bold; color: #F44336; font-size: 14px;')
        self.error_count_label = QLabel('0')
        self.error_count_label.setStyleSheet('font-size: 18px; font-weight: bold; color: #F44336;')
        perf_layout.addWidget(error_count_label, 2, 0)
        perf_layout.addWidget(self.error_count_label, 2, 1)
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        connection_status_label = QLabel('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:')
        connection_status_label.setStyleSheet('font-weight: bold; color: #009688; font-size: 14px;')
        self.connection_status_label = QLabel('‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠')
        self.connection_status_label.setStyleSheet('font-size: 18px; font-weight: bold; color: #009688;')
        perf_layout.addWidget(connection_status_label, 3, 0)
        perf_layout.addWidget(self.connection_status_label, 3, 1)
        
        perf_group.setLayout(perf_layout)
        layout.addWidget(perf_group)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
        control_layout = QHBoxLayout()
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        clear_stats_btn = QPushButton('üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥')
        clear_stats_btn.clicked.connect(self.clear_stats)
        clear_stats_btn.setStyleSheet('background-color: #FF5722; font-size: 12px; padding: 8px;')
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á Memory
        clear_memory_btn = QPushButton('üßπ ‡∏•‡πâ‡∏≤‡∏á Memory')
        clear_memory_btn.clicked.connect(self.clear_memory)
        clear_memory_btn.setStyleSheet('background-color: #FF9800; font-size: 12px; padding: 8px;')
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î
        close_btn = QPushButton('‡∏õ‡∏¥‡∏î Dashboard')
        close_btn.clicked.connect(self.close)
        close_btn.setStyleSheet('background-color: #FF5722; font-size: 14px; padding: 10px;')
        
        control_layout.addWidget(clear_stats_btn)
        control_layout.addWidget(clear_memory_btn)
        control_layout.addWidget(close_btn)
        layout.addLayout(control_layout)

        self.setLayout(layout)

    def update_stats(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å"""
        if self.parent:
            try:
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
                self.detection_count_label.setText(str(self.parent.detection_count))
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                self.total_messages_label.setText(str(self.parent.twitch_total_messages))
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                if self.parent.start_time:
                    elapsed = datetime.now() - self.parent.start_time
                    hours = elapsed.seconds // 3600
                    minutes = (elapsed.seconds % 3600) // 60
                    seconds = elapsed.seconds % 60
                    self.working_time_label.setText(f'{hours:02d}:{minutes:02d}:{seconds:02d}')
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
                now = datetime.now()
                recent_detections = [t for t in self.parent.detection_times if (now - t).seconds <= 60]
                freq = len(recent_detections)
                self.detection_freq_label.setText(f'{freq} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ')
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö
                if self.parent.twitch_total_messages > 0:
                    ratio = (self.parent.detection_count / self.parent.twitch_total_messages) * 100
                    self.ratio_label.setText(f'{ratio:.2f}%')
                else:
                    self.ratio_label.setText('0%')
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
                if hasattr(self.parent, 'performance_stats'):
                    # ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
                    avg_time = self.parent.performance_stats.get('avg_detection_time', 0)
                    self.avg_detection_label.setText(f'{avg_time:.3f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ')
                    
                    # ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Memory
                    memory_usage = self.parent.performance_stats.get('memory_usage', 0)
                    self.memory_usage_label.setText(f'{memory_usage:.1f} KB')
                    
                    # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Error
                    error_count = getattr(self.parent, 'error_count', 0)
                    self.error_count_label.setText(str(error_count))
                    
                    # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
                    if self.parent.twitch_thread and self.parent.twitch_thread.isRunning():
                        self.connection_status_label.setText('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß')
                        self.connection_status_label.setStyleSheet('font-size: 18px; font-weight: bold; color: #4CAF50;')
                    else:
                        self.connection_status_label.setText('‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠')
                        self.connection_status_label.setStyleSheet('font-size: 18px; font-weight: bold; color: #F44336;')
                        
            except Exception as e:
                print(f"Error updating dashboard stats: {e}")

    def clear_stats(self):
        """‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            if self.parent:
                self.parent.detection_count = 0
                self.parent.detection_times = []
                self.parent.twitch_total_messages = 0
                self.parent.twitch_bad_word_count = 0
                self.parent.error_count = 0
                
                # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï performance stats
                if hasattr(self.parent, 'performance_stats'):
                    self.parent.performance_stats = {
                        'avg_detection_time': 0,
                        'total_detection_time': 0,
                        'detection_count': 0,
                        'memory_usage': 0
                    }
                
                QMessageBox.information(self, '‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥', '‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
                
        except Exception as e:
            QMessageBox.warning(self, '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', f'‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÑ‡∏î‡πâ: {e}')

    def clear_memory(self):
        """‡∏•‡πâ‡∏≤‡∏á Memory"""
        try:
            if self.parent and self.parent.twitch_thread and self.parent.twitch_thread.worker:
                self.parent.twitch_thread.worker.clear_chat_messages()
                QMessageBox.information(self, '‡∏•‡πâ‡∏≤‡∏á Memory', '‡∏•‡πâ‡∏≤‡∏á Memory ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
            else:
                QMessageBox.information(self, '‡∏•‡πâ‡∏≤‡∏á Memory', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Memory ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πâ‡∏≤‡∏á')
                
        except Exception as e:
            QMessageBox.warning(self, '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', f'‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πâ‡∏≤‡∏á Memory ‡πÑ‡∏î‡πâ: {e}')

class BadWordDetectorApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Twitch Bad Word Detector - Enhanced Version')
        self.setGeometry(200, 200, 800, 700)
        self.setFont(QFont('Tahoma', 10))
        self.bad_words = self.load_all_bad_words()
        self.sound_file = None
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dashboard
        self.detection_count = 0
        self.start_time = None
        self.detection_times = []
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Twitch mode
        self.twitch_thread = None
        self.twitch_total_messages = 0
        self.twitch_bad_word_count = 0
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° Performance Monitoring
        self.performance_stats = {
            'avg_detection_time': 0,
            'total_detection_time': 0,
            'detection_count': 0,
            'memory_usage': 0
        }
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° Error Tracking
        self.error_count = 0
        self.last_error_time = None
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î log_dir ‡∏Å‡πà‡∏≠‡∏ô
        self.log_dir = "logs"
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå logs
        if not os.path.exists(self.log_dir):
            os.makedirs(self.log_dir)
        
        self.tray_icon = QSystemTrayIcon(self)
        style = self.style()
        icon = style.standardIcon(QStyle.SP_MessageBoxWarning)
        self.tray_icon.setIcon(icon)
        self.tray_icon.setVisible(True)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° Performance Timer
        self.performance_timer = QTimer()
        self.performance_timer.timeout.connect(self.update_performance_stats)
        self.performance_timer.start(5000)  # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        
        self.apply_default_style()
        self.init_ui()

    def update_performance_stats(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
        try:
            if self.twitch_thread and self.twitch_thread.worker:
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì memory usage (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì)
                memory_usage = len(self.twitch_thread.worker.get_chat_messages()) * 0.1  # KB per message
                self.performance_stats['memory_usage'] = memory_usage
                
                # ‡πÅ‡∏™‡∏î‡∏á warning ‡∏ñ‡πâ‡∏≤ memory ‡πÉ‡∏ä‡πâ‡πÄ‡∏¢‡∏≠‡∏∞
                if memory_usage > 50:  # 50 KB
                    self.show_memory_warning(memory_usage)
                    
        except Exception as e:
            self.log_error(f"Error updating performance stats: {e}")

    def show_memory_warning(self, memory_usage):
        """‡πÅ‡∏™‡∏î‡∏á warning ‡πÄ‡∏°‡∏∑‡πà‡∏≠ memory ‡πÉ‡∏ä‡πâ‡πÄ‡∏¢‡∏≠‡∏∞"""
        if not hasattr(self, '_last_memory_warning') or \
           (datetime.now() - self._last_memory_warning).seconds > 60:
            self._last_memory_warning = datetime.now()
            QMessageBox.warning(
                self, 
                'Memory Usage Warning', 
                f'Memory usage is high: {memory_usage:.1f} KB\nConsider clearing chat messages.'
            )

    def log_error(self, error_message):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å error ‡∏û‡∏£‡πâ‡∏≠‡∏° timestamp"""
        self.error_count += 1
        self.last_error_time = datetime.now()
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå log
        try:
            with open(os.path.join(self.log_dir, 'error.log'), 'a', encoding='utf-8') as f:
                timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                f.write(f'[{timestamp}] {error_message}\n')
        except Exception as e:
            print(f"Failed to write error log: {e}")

    def show_user_friendly_error(self, error_type, error_message):
        """‡πÅ‡∏™‡∏î‡∏á error message ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
        error_titles = {
            'connection': '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß',
            'detection': '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö',
            'memory': '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥',
            'file': '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå',
            'general': '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'
        }
        
        title = error_titles.get(error_type, '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î')
        
        # ‡πÅ‡∏™‡∏î‡∏á notification
        self.tray_icon.showMessage(
            title,
            error_message,
            QSystemTrayIcon.Critical,
            5000
        )
        
        # ‡πÅ‡∏™‡∏î‡∏á dialog ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô error ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        if error_type in ['connection', 'memory']:
            QMessageBox.critical(self, title, error_message)

    def apply_default_style(self):
        """‡πÉ‡∏ä‡πâ style ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (Light Mode)"""
        self.setStyleSheet("""
            QWidget {
                background-color: #f0f0f0;
            }
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:disabled {
                background-color: #cccccc;
            }
            QGroupBox {
                border: 2px solid #4CAF50;
                border-radius: 6px;
                margin-top: 12px;
                font-weight: bold;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px;
            }
            QTextEdit {
                border: 1px solid #cccccc;
                border-radius: 4px;
                padding: 5px;
                background-color: white;
            }
            QLabel {
                color: #333333;
            }
            QLineEdit {
                padding: 5px;
                border: 1px solid #cccccc;
                border-radius: 4px;
                background-color: white;
            }
            QCheckBox {
                color: #333333;
                font-weight: bold;
            }
        """)

    def init_ui(self):
        layout = QVBoxLayout()
        layout.setSpacing(15)
        layout.setContentsMargins(20, 20, 20, 20)

        # Header
        header_label = QLabel('üéÆ Twitch Bad Word Detector - Enhanced')
        header_label.setStyleSheet('font-size: 24px; font-weight: bold; color: #9146FF; text-align: center; margin: 10px;')
        layout.addWidget(header_label)

        # Status
        status_frame = QFrame()
        status_frame.setFrameStyle(QFrame.StyledPanel)
        status_layout = QHBoxLayout()
        self.status_label = QLabel('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô')
        self.status_label.setStyleSheet('color: #4CAF50; font-weight: bold; font-size: 12px;')
        status_layout.addWidget(self.status_label)
        status_frame.setLayout(status_layout)
        layout.addWidget(status_frame)

        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        detection_info = QLabel('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö: ‡πÑ‡∏ó‡∏¢ + ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© | ‚ú® ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ | üö´ ‡∏•‡∏ö Fuzzy Matching')
        detection_info.setStyleSheet('font-weight: bold; color: #2196F3; font-size: 12px;')
        layout.addWidget(detection_info)

        # Badword manager buttons
        badword_mgr_btn = QPushButton('‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö (‡πÑ‡∏ó‡∏¢)')
        badword_mgr_btn.clicked.connect(lambda: self.open_badword_manager('badwords.txt'))
        badword_mgr_en_btn = QPushButton('‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)')
        badword_mgr_en_btn.clicked.connect(lambda: self.open_badword_manager('badwords_en.txt'))
        btn_mgr_layout = QHBoxLayout()
        btn_mgr_layout.addWidget(badword_mgr_btn)
        btn_mgr_layout.addWidget(badword_mgr_en_btn)
        layout.addLayout(btn_mgr_layout)

        # Twitch settings
        self.twitch_group = QGroupBox('‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Twitch')
        twitch_layout = QGridLayout()
        
        twitch_layout.addWidget(QLabel('Channel Name:'), 0, 0)
        self.channel_input = QLineEdit()
        self.channel_input.setPlaceholderText('‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠ channel (‡πÄ‡∏ä‡πà‡∏ô: ninja)')
        twitch_layout.addWidget(self.channel_input, 0, 1)
        
        twitch_layout.addWidget(QLabel('OAuth Token (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö):'), 1, 0)
        self.oauth_input = QLineEdit()
        self.oauth_input.setPlaceholderText('oauth:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx')
        self.oauth_input.setEchoMode(QLineEdit.Password)
        twitch_layout.addWidget(self.oauth_input, 1, 1)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Twitch
        twitch_layout.addWidget(QLabel('‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:'), 2, 0)
        self.twitch_total_label = QLabel('0')
        self.twitch_total_label.setStyleSheet('font-weight: bold; color: #2196F3;')
        twitch_layout.addWidget(self.twitch_total_label, 2, 1)
        
        twitch_layout.addWidget(QLabel('‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏ö:'), 3, 0)
        self.twitch_bad_label = QLabel('0')
        self.twitch_bad_label.setStyleSheet('font-weight: bold; color: #d32f2f;')
        twitch_layout.addWidget(self.twitch_bad_label, 3, 1)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        help_btn = QPushButton('‡∏ß‡∏¥‡∏ò‡∏µ‡πÑ‡∏î‡πâ OAuth Token')
        help_btn.clicked.connect(self.show_oauth_help)
        help_btn.setStyleSheet('background-color: #FF9800; font-size: 12px;')
        twitch_layout.addWidget(help_btn, 4, 0, 1, 2)
        
        self.twitch_group.setLayout(twitch_layout)
        layout.addWidget(self.twitch_group)

        # Control buttons
        control_group = QGroupBox('‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö')
        control_layout = QHBoxLayout()
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Twitch mode
        self.twitch_connect_btn = QPushButton('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Twitch')
        self.twitch_disconnect_btn = QPushButton('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠')
        self.twitch_connect_btn.clicked.connect(self.connect_twitch)
        self.twitch_disconnect_btn.clicked.connect(self.disconnect_twitch)
        self.twitch_disconnect_btn.setEnabled(False)
        control_layout.addWidget(self.twitch_connect_btn)
        control_layout.addWidget(self.twitch_disconnect_btn)
        
        control_group.setLayout(control_layout)
        layout.addWidget(control_group)

        # Dashboard Button
        dashboard_btn = QPushButton('üìä ‡πÄ‡∏õ‡∏¥‡∏î Dashboard')
        dashboard_btn.clicked.connect(self.open_dashboard)
        dashboard_btn.setStyleSheet('background-color: #2196F3; font-size: 14px; padding: 10px;')
        layout.addWidget(dashboard_btn)
        
        # Settings
        settings_group = QGroupBox('‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤')
        settings_layout = QGridLayout()
        settings_layout.setSpacing(15)
        
        sound_label = QLabel('‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:')
        sound_label.setStyleSheet('font-weight: bold;')
        settings_layout.addWidget(sound_label, 0, 0)
        
        self.sound_btn = QPushButton('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á (.wav)')
        self.sound_btn.clicked.connect(self.select_sound)
        settings_layout.addWidget(self.sound_btn, 0, 1)
        
        # ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå
        file_mgmt_label = QLabel('‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå:')
        file_mgmt_label.setStyleSheet('font-weight: bold;')
        settings_layout.addWidget(file_mgmt_label, 1, 0)
        
        file_mgmt_layout = QHBoxLayout()
        self.select_folder_btn = QPushButton('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å')
        self.select_folder_btn.clicked.connect(self.select_save_folder)
        self.folder_label = QLabel(f'‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {self.log_dir}')
        self.folder_label.setStyleSheet('font-size: 10px; color: #666;')
        
        file_mgmt_layout.addWidget(self.select_folder_btn)
        file_mgmt_layout.addWidget(self.folder_label)
        settings_layout.addLayout(file_mgmt_layout, 1, 1)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå
        file_actions_layout = QHBoxLayout()
        self.open_folder_btn = QPushButton('‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå')
        self.open_folder_btn.clicked.connect(self.open_save_folder)
        self.cleanup_btn = QPushButton('‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤ (7 ‡∏ß‡∏±‡∏ô)')
        self.cleanup_btn.clicked.connect(self.cleanup_old_files)
        
        file_actions_layout.addWidget(self.open_folder_btn)
        file_actions_layout.addWidget(self.cleanup_btn)
        settings_layout.addLayout(file_actions_layout, 2, 0, 1, 2)

        settings_group.setLayout(settings_layout)
        layout.addWidget(settings_group)

        # Results - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏ö
        results_group = QGroupBox('‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö')
        results_layout = QVBoxLayout()
        
        # Tab widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏¢‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        self.results_tab = QTabWidget()
        
        # Tab ‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏ö
        badword_tab = QWidget()
        badword_layout = QVBoxLayout()
        
        badword_label = QLabel('‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏ö:')
        badword_label.setStyleSheet('font-weight: bold; color: #d32f2f;')
        badword_layout.addWidget(badword_label)
        
        self.badword_text = QTextEdit()
        self.badword_text.setMaximumHeight(100)
        self.badword_text.setPlaceholderText('‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà...')
        badword_layout.addWidget(self.badword_text)
        
        badword_tab.setLayout(badword_layout)
        self.results_tab.addTab(badword_tab, '‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏ö')
        
        # Tab ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏ó (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Twitch mode)
        chat_tab = QWidget()
        chat_layout = QVBoxLayout()
        
        chat_label = QLabel('‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:')
        chat_label.setStyleSheet('font-weight: bold; color: #2196F3;')
        chat_layout.addWidget(chat_label)
        
        self.chat_text = QTextEdit()
        self.chat_text.setMaximumHeight(150)
        self.chat_text.setPlaceholderText('‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏ó‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà (Twitch mode)...')
        chat_layout.addWidget(self.chat_text)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏ó
        clear_chat_btn = QPushButton('‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏ó')
        clear_chat_btn.clicked.connect(self.clear_chat_messages)
        clear_chat_btn.setStyleSheet('background-color: #FF5722; font-size: 12px;')
        chat_layout.addWidget(clear_chat_btn)
        
        chat_tab.setLayout(chat_layout)
        self.results_tab.addTab(chat_tab, '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏ó')
        
        results_layout.addWidget(self.results_tab)
        results_group.setLayout(results_layout)
        layout.addWidget(results_group)

        export_btn = QPushButton('Export Log (CSV)')
        export_btn.clicked.connect(self.export_log)
        layout.addWidget(export_btn)

        # UI/UX ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
        # Dark Mode Toggle
        dark_mode_layout = QHBoxLayout()
        self.dark_mode_checkbox = QCheckBox('Dark Mode')
        self.dark_mode_checkbox.clicked.connect(self.toggle_dark_mode)
        dark_mode_layout.addWidget(self.dark_mode_checkbox)
        
        # Keyboard Shortcuts Info
        shortcuts_info = QLabel('‚å®Ô∏è Shortcuts: Ctrl+D: Dark Mode | Ctrl+E: Export Log | Ctrl+R: Reset Stats')
        shortcuts_info.setStyleSheet('font-size: 10px; color: #666; background-color: #f9f9f9; padding: 5px; border-radius: 3px;')
        dark_mode_layout.addWidget(shortcuts_info)
        
        layout.addLayout(dark_mode_layout)

        self.setLayout(layout)

    def connect_twitch(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Twitch"""
        try:
            channel = self.channel_input.text().strip()
            if not channel:
                QMessageBox.warning(self, '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠ channel')
                return
            
            # Validate channel name
            if not re.match(r'^[a-zA-Z0-9_]{4,25}$', channel):
                QMessageBox.warning(self, '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏ä‡∏∑‡πà‡∏≠ channel ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (4-25 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£, ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)')
                return
            
            oauth = self.oauth_input.text().strip() if self.oauth_input.text().strip() else None
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö OAuth Token
            if oauth and not oauth.startswith('oauth:'):
                oauth = f'oauth:{oauth}'
            
            # Validate OAuth format
            if oauth and not re.match(r'^oauth:[a-zA-Z0-9]{30}$', oauth):
                QMessageBox.warning(self, '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö OAuth Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
                return
            
            self.twitch_thread = TwitchChatThread(channel, oauth)
            
            # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ signals
            self.twitch_thread.worker.message_received.connect(self.on_twitch_message)
            self.twitch_thread.worker.bad_word_detected.connect(self.on_twitch_bad_word)
            self.twitch_thread.worker.connection_status.connect(self.on_twitch_connection_status)
            self.twitch_thread.worker.chat_stats.connect(self.on_twitch_stats)
            self.twitch_thread.worker.error_occurred.connect(self.on_twitch_error)
            
            self.twitch_thread.start()
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏°
            self.twitch_connect_btn.setEnabled(False)
            self.twitch_disconnect_btn.setEnabled(True)
            
            self.status_label.setText('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Twitch...')
            self.status_label.setStyleSheet('color: #FFA500; font-weight: bold; font-size: 12px;')
            
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
            self.start_time = datetime.now()
            self.twitch_total_messages = 0
            self.twitch_bad_word_count = 0
            self.detection_count = 0
            self.detection_times = []
            self.twitch_total_label.setText('0')
            self.twitch_bad_label.setText('0')
            
        except Exception as e:
            error_msg = f"Error connecting to Twitch: {e}"
            self.log_error(error_msg)
            self.show_user_friendly_error('connection', error_msg)

    def disconnect_twitch(self):
        """‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Twitch"""
        try:
            if self.twitch_thread:
                self.twitch_thread.quit()
                self.twitch_thread.wait(5000)  # ‡∏£‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                if self.twitch_thread.isRunning():
                    self.twitch_thread.terminate()  # Force terminate
                self.twitch_thread = None
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏°
            self.twitch_connect_btn.setEnabled(True)
            self.twitch_disconnect_btn.setEnabled(False)
            
            self.status_label.setText('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Twitch')
            self.status_label.setStyleSheet('color: #FFA500; font-weight: bold; font-size: 12px;')
            
        except Exception as e:
            error_msg = f"Error disconnecting from Twitch: {e}"
            self.log_error(error_msg)
            self.show_user_friendly_error('connection', error_msg)

    def on_twitch_message(self, username, message):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Twitch"""
        try:
            self.twitch_total_messages += 1
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô chat tab
            timestamp = datetime.now().strftime('%H:%M:%S')
            chat_line = f'[{timestamp}] {username}: {message}'
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
            current_text = self.chat_text.toPlainText()
            if current_text:
                chat_line = chat_line + '\n' + current_text
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î (‡πÄ‡∏Å‡πá‡∏ö 50 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
            lines = chat_line.split('\n')
            if len(lines) > 50:
                lines = lines[:50]
                chat_line = '\n'.join(lines)
            
            self.chat_text.setPlainText(chat_line)
            
        except Exception as e:
            self.log_error(f"Error processing Twitch message: {e}")

    def on_twitch_bad_word(self, username, message, bad_words):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÉ‡∏ô Twitch"""
        try:
            start_time = time.time()
            
            timestamp = datetime.now().strftime('%H:%M:%S')
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô badword tab
            current_badword_text = self.badword_text.toPlainText()
            new_line = f'[{timestamp}] {username}: {message} -> ‡∏û‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö: {", ".join(bad_words)}'
            
            if current_badword_text:
                new_line = new_line + '\n' + current_badword_text
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î (‡πÄ‡∏Å‡πá‡∏ö 20 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
            lines = new_line.split('\n')
            if len(lines) > 20:
                lines = lines[:20]
                new_line = '\n'.join(lines)
            
            self.badword_text.setPlainText(new_line)
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            self.detection_count += 1
            self.detection_times.append(datetime.now())
            self.twitch_bad_word_count += 1
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
            detection_time = time.time() - start_time
            self.performance_stats['total_detection_time'] += detection_time
            self.performance_stats['detection_count'] += 1
            self.performance_stats['avg_detection_time'] = (
                self.performance_stats['total_detection_time'] / 
                self.performance_stats['detection_count']
            )
            
            # ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            self.play_alert()
            
            # ‡πÅ‡∏™‡∏î‡∏á notification
            self.tray_icon.showMessage(
                '‡∏û‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÉ‡∏ô Twitch',
                f'{username}: {", ".join(bad_words)}',
                QSystemTrayIcon.Warning,
                3000
            )
            
        except Exception as e:
            self.log_error(f"Error processing bad word detection: {e}")

    def on_twitch_connection_status(self, connected, message):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Twitch ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô"""
        try:
            if connected:
                self.status_label.setText(f'‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {message}')
                self.status_label.setStyleSheet('color: #4CAF50; font-weight: bold; font-size: 12px;')
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                self.twitch_connect_btn.setEnabled(False)
                self.twitch_disconnect_btn.setEnabled(True)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô chat tab
                timestamp = datetime.now().strftime('%H:%M:%S')
                self.chat_text.setPlainText(f'[{timestamp}] ‚úÖ {message}\n')
            else:
                self.status_label.setText(f'‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {message}')
                self.status_label.setStyleSheet('color: #FF0000; font-weight: bold; font-size: 12px;')
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≤‡∏î
                self.twitch_connect_btn.setEnabled(True)
                self.twitch_disconnect_btn.setEnabled(False)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô chat tab
                timestamp = datetime.now().strftime('%H:%M:%S')
                current_text = self.chat_text.toPlainText()
                self.chat_text.setPlainText(f'[{timestamp}] ‚ùå {message}\n' + current_text)
                
        except Exception as e:
            self.log_error(f"Error handling connection status: {e}")

    def on_twitch_stats(self, total_messages, bad_word_count):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Twitch"""
        try:
            self.twitch_total_messages = total_messages
            self.twitch_bad_word_count = bad_word_count
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó label ‡πÉ‡∏ô UI
            self.twitch_total_label.setText(str(total_messages))
            self.twitch_bad_label.setText(str(bad_word_count))
            
        except Exception as e:
            self.log_error(f"Error updating Twitch stats: {e}")

    def on_twitch_error(self, error_message):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô Twitch"""
        try:
            self.log_error(f"Twitch Error: {error_message}")
            self.status_label.setText(f'‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Twitch - {error_message}')
            self.status_label.setStyleSheet('color: #FF0000; font-weight: bold; font-size: 12px;')
            
            # ‡πÅ‡∏™‡∏î‡∏á error dialog ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô error ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
            if 'connection' in error_message.lower() or 'socket' in error_message.lower():
                self.show_user_friendly_error('connection', error_message)
                
        except Exception as e:
            self.log_error(f"Error handling Twitch error: {e}")

    def show_oauth_help(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡πÑ‡∏î‡πâ OAuth Token"""
        help_text = """
‡∏ß‡∏¥‡∏ò‡∏µ‡πÑ‡∏î‡πâ OAuth Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Twitch:

1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà https://twitchapps.com/tmi/
2. ‡∏Ñ‡∏•‡∏¥‡∏Å "Connect with Twitch"
3. ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
4. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å OAuth Token ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
5. ‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á OAuth Token (‡πÉ‡∏™‡πà oauth: ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤)

‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: OAuth Token ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏Å‡∏ß‡πà‡∏≤
        """
        QMessageBox.information(self, '‡∏ß‡∏¥‡∏ò‡∏µ‡πÑ‡∏î‡πâ OAuth Token', help_text)

    def clear_chat_messages(self):
        """‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏ó"""
        try:
            self.chat_text.clear()
            timestamp = datetime.now().strftime('%H:%M:%S')
            self.chat_text.setPlaceholderText('‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏ó‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà (Twitch mode)...')
            
            # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô worker ‡∏î‡πâ‡∏ß‡∏¢
            if self.twitch_thread and self.twitch_thread.worker:
                self.twitch_thread.worker.clear_chat_messages()
                
        except Exception as e:
            self.log_error(f"Error clearing chat messages: {e}")

    def select_sound(self):
        file, _ = QFileDialog.getOpenFileName(self, '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á', '', 'WAV Files (*.wav)')
        if file:
            self.sound_file = file
            self.sound_btn.setText(os.path.basename(file))
        else:
            self.sound_file = None
            self.sound_btn.setText('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á (.wav)')

    def load_all_bad_words(self):
        badwords = []
        for filename in ['badwords.txt', 'badwords_en.txt']:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    badwords += [line.strip() for line in f if line.strip()]
            except FileNotFoundError:
                continue
        return badwords

    def play_alert(self):
        if self.sound_file:
            try:
                winsound.PlaySound(self.sound_file, winsound.SND_FILENAME | winsound.SND_ASYNC)
            except Exception as e:
                print(f'‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {e}')
        else:
            winsound.Beep(1000, 500)

    def open_badword_manager(self, filename):
        dlg = BadWordManagerDialog(filename, self)
        if dlg.exec_():
            # reload badwords after editing
            self.bad_words = self.load_all_bad_words()
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó bad_words ‡πÉ‡∏ô worker ‡∏î‡πâ‡∏ß‡∏¢
            if self.twitch_thread and self.twitch_thread.worker:
                self.twitch_thread.worker.bad_words = self.load_all_bad_words()

    def export_log(self):
        """Export log ‡∏û‡∏£‡πâ‡∏≠‡∏° error handling"""
        try:
            if not hasattr(self, 'twitch_thread') or not self.twitch_thread or not hasattr(self.twitch_thread.worker, 'get_chat_messages'):
                QMessageBox.information(self, 'Export Log', '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏à‡∏≤‡∏Å Twitch')
                return
            
            file, _ = QFileDialog.getSaveFileName(self, '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV', '', 'CSV Files (*.csv)')
            if file:
                export_data = []
                
                # Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Twitch mode
                for chat_msg in self.twitch_thread.worker.get_chat_messages():
                    export_data.append({
                        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': chat_msg['timestamp'].strftime('%Y-%m-%d %H:%M:%S'),
                        'Channel': chat_msg['channel'],
                        'Username': chat_msg['username'],
                        '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°': chat_msg['message'],
                        '‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏ö': ', '.join(chat_msg['bad_words']),
                        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö': len(chat_msg['bad_words'])
                    })
                
                df = pd.DataFrame(export_data)
                df.to_csv(file, index=False, encoding='utf-8-sig')
                QMessageBox.information(self, 'Export Log', f'‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß\n‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(export_data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£')
                
        except PermissionError:
            error_msg = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô"
            self.show_user_friendly_error('file', error_msg)
        except Exception as e:
            error_msg = f"Error exporting log: {e}"
            self.log_error(error_msg)
            self.show_user_friendly_error('file', error_msg)

    def select_save_folder(self):
        folder = QFileDialog.getExistingDirectory(self, '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å')
        if folder:
            self.log_dir = folder
            self.folder_label.setText(f'‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {self.log_dir}')

    def open_save_folder(self):
        os.startfile(self.log_dir)

    def cleanup_old_files(self):
        """‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏° error handling"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
            removed_count = 0
            for filename in os.listdir(self.log_dir):
                if filename.endswith(('.png', '.jpg', '.csv', '.log')):
                    file_path = os.path.join(self.log_dir, filename)
                    try:
                        file_time = datetime.fromtimestamp(os.path.getctime(file_path))
                        if datetime.now() - file_time > timedelta(days=7):
                            os.remove(file_path)
                            removed_count += 1
                    except PermissionError:
                        continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏•‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
                    except Exception as e:
                        self.log_error(f"Error removing file {filename}: {e}")
                        
            QMessageBox.information(self, '‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', f'‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß {removed_count} ‡πÑ‡∏ü‡∏•‡πå')
            
        except Exception as e:
            error_msg = f"Error cleaning up old files: {e}"
            self.log_error(error_msg)
            self.show_user_friendly_error('file', error_msg)

    def closeEvent(self, event):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
        try:
            # ‡∏´‡∏¢‡∏∏‡∏î performance timer
            if hasattr(self, 'performance_timer'):
                self.performance_timer.stop()
            
            # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Twitch ‡πÅ‡∏•‡∏∞‡∏£‡∏≠ thread ‡∏à‡∏ö
            if self.twitch_thread:
                self.disconnect_twitch()
                # ‡∏£‡∏≠ thread ‡∏à‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
                if self.twitch_thread.isRunning():
                    self.twitch_thread.wait(3000)  # ‡∏£‡∏≠ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                    if self.twitch_thread.isRunning():
                        self.twitch_thread.terminate()  # Force terminate
                        self.twitch_thread.wait(1000)  # ‡∏£‡∏≠‡∏≠‡∏µ‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            self.log_final_stats()
            
            event.accept()
            
        except Exception as e:
            self.log_error(f"Error during application shutdown: {e}")
            event.accept()

    def log_final_stats(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢"""
        try:
            stats = {
                'total_messages': self.twitch_total_messages,
                'bad_word_count': self.twitch_bad_word_count,
                'detection_count': self.detection_count,
                'error_count': self.error_count,
                'avg_detection_time': self.performance_stats['avg_detection_time'],
                'session_duration': (datetime.now() - self.start_time).total_seconds() if self.start_time else 0
            }
            
            with open(os.path.join(self.log_dir, 'session_stats.log'), 'a', encoding='utf-8') as f:
                timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                f.write(f'[{timestamp}] Session Stats: {stats}\n')
                
        except Exception as e:
            print(f"Error logging final stats: {e}")

    def toggle_dark_mode(self):
        """‡∏™‡∏•‡∏±‡∏ö Dark Mode"""
        if self.dark_mode_checkbox.isChecked():
            self.setStyleSheet("""
                QWidget {
                    background-color: #2d2d2d;
                    color: #ffffff;
                }
                QPushButton {
                    background-color: #4CAF50;
                    color: white;
                    border: none;
                    padding: 8px 16px;
                    border-radius: 4px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #45a049;
                }
                QPushButton:disabled {
                    background-color: #555555;
                    color: #888888;
                }
                QGroupBox {
                    border: 2px solid #4CAF50;
                    border-radius: 6px;
                    margin-top: 12px;
                    font-weight: bold;
                    padding-top: 10px;
                    background-color: #3d3d3d;
                }
                QTextEdit {
                    border: 1px solid #555555;
                    border-radius: 4px;
                    padding: 5px;
                    background-color: #3d3d3d;
                    color: #ffffff;
                }
                QLabel {
                    color: #ffffff;
                }
                QLineEdit {
                    padding: 5px;
                    border: 1px solid #555555;
                    border-radius: 4px;
                    background-color: #3d3d3d;
                    color: #ffffff;
                }
                QCheckBox {
                    color: #ffffff;
                    font-weight: bold;
                }
                QTabWidget::pane {
                    border: 1px solid #555555;
                    background-color: #3d3d3d;
                }
                QTabBar::tab {
                    background-color: #2d2d2d;
                    color: #ffffff;
                    padding: 8px 16px;
                    border: 1px solid #555555;
                }
                QTabBar::tab:selected {
                    background-color: #4CAF50;
                }
            """)
        else:
            self.apply_default_style()

    def reset_stats(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"""
        self.detection_count = 0
        self.detection_times = []
        self.start_time = datetime.now()
        QMessageBox.information(self, '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥', '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')

    def keyPressEvent(self, event):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Keyboard Shortcuts"""
        if event.key() == Qt.Key_D and event.modifiers() == Qt.ControlModifier:
            # Ctrl+D: Dark Mode
            self.dark_mode_checkbox.setChecked(not self.dark_mode_checkbox.isChecked())
            self.toggle_dark_mode()
        elif event.key() == Qt.Key_E and event.modifiers() == Qt.ControlModifier:
            # Ctrl+E: Export Log
            self.export_log()
        elif event.key() == Qt.Key_R and event.modifiers() == Qt.ControlModifier:
            # Ctrl+R: Reset Stats
            self.reset_stats()
        else:
            super().keyPressEvent(event)

    def open_dashboard(self):
        """‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ Dashboard"""
        self.dashboard_window = DashboardWindow(self)
        self.dashboard_window.show()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = BadWordDetectorApp()
    window.show()
    sys.exit(app.exec_())