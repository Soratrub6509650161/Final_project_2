#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test file ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö wordsegment library
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô "hellofuck" -> "hello fuck"
"""

import sys
import re

def test_wordsegment_installation():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á wordsegment"""
    try:
        from wordsegment import load, segment # type: ignore
        print("‚úÖ wordsegment imported successfully")
        return True
    except ImportError:
        print("‚ùå wordsegment not installed")
        print("üí° Install with: pip install wordsegment")
        return False

def test_basic_segmentation():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
    try:
        from wordsegment import load, segment
        
        print("üìö Loading wordsegment dictionary...")
        load()  # ‡πÇ‡∏´‡∏•‡∏î dictionary ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
        print("‚úÖ Dictionary loaded successfully")
        
        test_cases = [
            "hellofuck",
            "youarebitch", 
            "thisshit",
            "goddamn",
            "holyshit",
            "whatthehell",
            "shutthefuckup"
        ]
        
        print("\nÔøΩÔøΩ Testing Basic Word Segmentation:")
        print("=" * 50)
        
        for text in test_cases:
            segmented = segment(text)
            print(f"'{text}' -> {' '.join(segmented)}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error in basic segmentation: {e}")
        return False

def test_profanity_detection():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥"""
    try:
        from wordsegment import load, segment
        
        load()
        
        # ‡∏Ñ‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        bad_words = {
            'fuck', 'ass', 'shit', 'bitch', 'damn', 'hell',
            'dumb', 'stupid', 'idiot', 'moron'
        }
        
        test_messages = [
            "hellofuck you",
            "youarebitch",
            "thisshit is bad",
            "goddamn it",
            "holyshit wow",
            "whatthehell happened",
            "shutthefuckup",
            "classroom",  # ‡∏Ñ‡∏ß‡∏£‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô class room
            "password",   # ‡∏Ñ‡∏ß‡∏£‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô pass word
            "grassland"   # ‡∏Ñ‡∏ß‡∏£‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô grass land
        ]
        
        print("\nüîç Testing Profanity Detection After Segmentation:")
        print("=" * 60)
        
        for message in test_messages:
            # ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏î‡πâ‡∏ß‡∏¢ wordsegment
            words = message.lower().split()
            segmented_words = []
            
            for word in words:
                if len(word) > 8:  # ‡∏Ñ‡∏≥‡∏¢‡∏≤‡∏ß
                    segmented = segment(word)
                    segmented_words.extend(segmented)
                else:
                    segmented_words.append(word)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö
            found_bad_words = [word for word in segmented_words if word in bad_words]
            
            if found_bad_words:
                print(f"'{message}' -> Found: {found_bad_words}")
                print(f"  Segmented: {segmented_words}")
            else:
                print(f"'{message}' -> Clean")
                print(f"  Segmented: {segmented_words}")
            print()
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error in profanity detection: {e}")
        return False

def test_edge_cases():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏Ç‡∏≠‡∏ö (edge cases)"""
    try:
        from wordsegment import load, segment
        
        load()
        
        edge_cases = [
            "a",           # ‡∏Ñ‡∏≥‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            "hi",          # ‡∏Ñ‡∏≥‡∏™‡∏±‡πâ‡∏ô
            "hello",       # ‡∏Ñ‡∏≥‡∏õ‡∏Å‡∏ï‡∏¥
            "helloworld",  # ‡∏Ñ‡∏≥‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô
            "helloworldhowareyou",  # ‡∏Ñ‡∏≥‡∏¢‡∏≤‡∏ß‡∏°‡∏≤‡∏Å
            "123456",      # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            "hello123",    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£+‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            "hello-world", # ‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢
            "hello_world", # ‡∏°‡∏µ underscore
            "HELLO",       # ‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà
            "Hello",       # ‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
            "",            # ‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ß‡πà‡∏≤‡∏á
            "   ",         # ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
            "hello world", # ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏≥
            "hello  world" # ‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
        ]
        
        print("\nÔøΩÔøΩ Testing Edge Cases:")
        print("=" * 50)
        
        for text in edge_cases:
            try:
                if text.strip():  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ß‡πà‡∏≤‡∏á
                    segmented = segment(text)
                    print(f"'{text}' -> {segmented}")
                else:
                    print(f"'{text}' -> [empty]")
            except Exception as e:
                print(f"'{text}' -> Error: {e}")
                
        return True
        
    except Exception as e:
        print(f"‚ùå Error in edge cases: {e}")
        return False

def test_performance():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
    try:
        from wordsegment import load, segment
        import time
        
        load()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        test_texts = [
            "hellofuck" * 10,  # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
            "youarebitch " * 50,  # ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏≥
            "thisshit " * 100,  # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏°‡∏≤‡∏Å
        ]
        
        print("\n‚ö° Testing Performance:")
        print("=" * 50)
        
        for i, text in enumerate(test_texts):
            start_time = time.time()
            
            # ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥
            segmented = segment(text)
            
            end_time = time.time()
            processing_time = (end_time - start_time) * 1000  # ‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            
            print(f"Test {i+1}: {len(text)} characters")
            print(f"  Time: {processing_time:.2f} ms")
            print(f"  Words: {len(segmented)}")
            print(f"  Sample: {segmented[:5]}...")  # ‡πÅ‡∏™‡∏î‡∏á 5 ‡∏Ñ‡∏≥‡πÅ‡∏£‡∏Å
            print()
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error in performance test: {e}")
        return False

def test_integration_with_main_system():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å"""
    try:
        from wordsegment import load, segment
        
        load()
        
        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Twitch chat
        chat_messages = [
            "hellofuck you man",
            "youarebitch stop it",
            "thisshit is getting old",
            "goddamn this game",
            "holyshit that was amazing",
            "whatthehell are you doing",
            "shutthefuckup already",
            "classroom is boring",
            "password is too simple",
            "grassland looks beautiful"
        ]
        
        print("\nüîó Testing Integration with Main System:")
        print("=" * 60)
        
        for message in chat_messages:
            print(f"Original: {message}")
            
            # ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏î‡πâ‡∏ß‡∏¢ wordsegment
            words = message.lower().split()
            all_segmented = []
            
            for word in words:
                if len(word) > 8:  # ‡∏Ñ‡∏≥‡∏¢‡∏≤‡∏ß
                    segmented = segment(word)
                    all_segmented.extend(segmented)
                else:
                    all_segmented.append(word)
            
            print(f"Segmented: {all_segmented}")
            
            # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö
            bad_words = {'fuck', 'ass', 'shit', 'bitch', 'damn', 'hell'}
            found = [word for word in all_segmented if word in bad_words]
            
            if found:
                print(f"ÔøΩÔøΩ Bad words detected: {found}")
            else:
                print("‚úÖ Clean message")
            print("-" * 40)
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error in integration test: {e}")
        return False

def test_comparison_with_other_methods():
    """‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ"""
    try:
        from wordsegment import load, segment
        
        load()
        
        test_cases = [
            "hellofuck",
            "youarebitch",
            "thisshit",
            "classroom",
            "password"
        ]
        
        print("\nüîÑ Comparing with Other Methods:")
        print("=" * 50)
        
        for text in test_cases:
            print(f"Text: '{text}'")
            
            # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: wordsegment
            wordsegment_result = segment(text)
            print(f"  wordsegment: {wordsegment_result}")
            
            # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: regex ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
            regex_result = re.findall(r'\b\w+\b', text.lower())
            print(f"  regex: {regex_result}")
            
            # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢ space
            space_result = text.lower().split()
            print(f"  space split: {space_result}")
            
            print()
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error in comparison test: {e}")
        return False

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ WordSegment Library Test")
    print("=" * 60)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
    if not test_wordsegment_installation():
        print("\n‚ùå Cannot proceed without wordsegment")
        return
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    test_basic_segmentation()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö
    test_profanity_detection()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏Ç‡∏≠‡∏ö
    test_edge_cases()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
    test_performance()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
    test_integration_with_main_system()
    
    # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    test_comparison_with_other_methods()
    
    print("\n‚úÖ All tests completed!")
    print("\nüí° Key Benefits of wordsegment:")
    print("- ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ ‡πÄ‡∏ä‡πà‡∏ô 'hellofuck' -> 'hello fuck'")
    print("- ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏Ñ‡πà load() ‡πÅ‡∏•‡∏∞ segment()")
    print("- ‡∏°‡∏µ dictionary ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°")
    print("- ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏ô")

if __name__ == "__main__":
    main()